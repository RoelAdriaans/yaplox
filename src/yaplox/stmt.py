# This file has been auto-generated by tools/generate_ast.py
# Do not edit this file by hand. Or do, but it will be overwritten

from abc import ABC, abstractmethod

from yaplox.expr import Expr


class StmtVisitor(ABC):
    """This class is used as an Vistor for the Stmt class"""

    @abstractmethod
    def visit_expression_stmt(self, stmt: "Expression"):
        raise NotImplementedError

    @abstractmethod
    def visit_print_stmt(self, stmt: "Print"):
        raise NotImplementedError


class Stmt(ABC):
    @abstractmethod
    def accept(self, visitor: StmtVisitor):
        raise NotImplementedError


class Expression(Stmt):
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor: StmtVisitor):
        """ Create a accept method that calls the visitor. """
        return visitor.visit_expression_stmt(self)


class Print(Stmt):
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor: StmtVisitor):
        """ Create a accept method that calls the visitor. """
        return visitor.visit_print_stmt(self)
